/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import controlador.MovimientoControlador;
import controlador.TarjetaCreditoControlador;
import gestortarjetas.TarjetaCredito;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.ModeloListaTarjetas;

/**
 * Esta clase permite crear un JFrame donde se cimentara nuestra aplicación.
 *
 * @author Heriberto Amezcua
 * @version 2.0
 * @since JDK 11.0.17
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private ArrayList<TarjetaCredito> listaTarjetas;
    private ModeloListaTarjetas modelo;
    private int[] filasSelec;
    private TarjetaCredito tarjetaSeleccionada;
    private TarjetaCreditoControlador tc;
    private MovimientoControlador mc;

    /**
     * Crea un nuevo JFrame sobre el que realizaremos todas las acciones en
     * nuestra aplicacion.
     */
    public VentanaPrincipal() {
        initComponents();
        inicializar();

        this.listaTarjetas = new ArrayList<>();
        modelo = new ModeloListaTarjetas();
        tableTarjetas.setModel(modelo);

        //obtener los indices de las tarjetas seleccionadas
        int[] rows = tableTarjetas.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            rows[i] = tableTarjetas.convertRowIndexToModel(rows[i]);
        }

        tc = new TarjetaCreditoControlador();
        this.listaTarjetas.addAll(tc.read());
        for (TarjetaCredito t : this.listaTarjetas) {
            modelo.añadirTarjeta(t);
        }

        mc = new MovimientoControlador();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pMenu = new javax.swing.JPopupMenu();
        mItemPagar = new javax.swing.JMenuItem();
        mItemMov = new javax.swing.JMenuItem();
        mItemModificar = new javax.swing.JMenuItem();
        mItemEliminar = new javax.swing.JMenuItem();
        pMenuEliminar = new javax.swing.JPopupMenu();
        mItemEliminarFilas = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTarjetas = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuEditar = new javax.swing.JMenu();
        mItemAñadir = new javax.swing.JMenuItem();

        mItemPagar.setText("Realizar Pago");
        mItemPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemPagarActionPerformed(evt);
            }
        });
        pMenu.add(mItemPagar);

        mItemMov.setText("Visualizar Movimientos");
        mItemMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemMovActionPerformed(evt);
            }
        });
        pMenu.add(mItemMov);

        mItemModificar.setText("Modificar");
        mItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemModificarActionPerformed(evt);
            }
        });
        pMenu.add(mItemModificar);

        mItemEliminar.setText("Eliminar");
        mItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemEliminarActionPerformed(evt);
            }
        });
        pMenu.add(mItemEliminar);

        mItemEliminarFilas.setText("Eliminar Filas");
        mItemEliminarFilas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemEliminarFilasActionPerformed(evt);
            }
        });
        pMenuEliminar.add(mItemEliminarFilas);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tableTarjetas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableTarjetas.setRowHeight(30);
        tableTarjetas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableTarjetasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableTarjetasMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableTarjetas);

        menuEditar.setMnemonic('e');
        menuEditar.setText("Editar");

        mItemAñadir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mItemAñadir.setMnemonic('a');
        mItemAñadir.setText("Añadir Tarjeta");
        mItemAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemAñadirActionPerformed(evt);
            }
        });
        menuEditar.add(mItemAñadir);

        jMenuBar1.add(menuEditar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Permite seleccionar una tarjeta al hacer click sobre ella en la tabla y
     * además si se hace doble click se abre el menu para visualizar los
     * movimientos.
     *
     * @param evt click izquierdo o doble click
     */
    private void tableTarjetasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTarjetasMousePressed

        //al hacer doble click sobre una cancion se abrira la opcion de modificar
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            int row = tableTarjetas.rowAtPoint(evt.getPoint());
            this.tarjetaSeleccionada = this.listaTarjetas.get(row);

            mostrarMovimientos();
        }

        //al hacer click derecho sobre una cancion se abrira un jpopupmenu
        if (evt.getButton() == MouseEvent.BUTTON3) {
            pMenu.setVisible(true);
            int row = tableTarjetas.rowAtPoint(evt.getPoint());
            int column = tableTarjetas.columnAtPoint(evt.getPoint());
            pMenu.show(tableTarjetas, evt.getPoint().x, evt.getPoint().y);
            tableTarjetas.setRowSelectionInterval(row, row);
            tableTarjetas.setColumnSelectionInterval(column, column);
            this.tarjetaSeleccionada = this.listaTarjetas.get(row);
        }
    }//GEN-LAST:event_tableTarjetasMousePressed

    /**
     * Permite eliminar una pelicula seleccionada tanto de la base de datos como
     * de la lista de tarjetas del modelo.
     *
     * @param evt click izquierdo
     */
    private void mItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemEliminarActionPerformed
//        gestor.delete(this.tarjetaSeleccionada.getNumeroTarjeta());
        tc.delete(this.tarjetaSeleccionada);
        int indice = this.listaTarjetas.indexOf(this.tarjetaSeleccionada);
        this.listaTarjetas.remove(indice);
        modelo.eliminarTarjeta(indice);
        modelo.fireTableDataChanged();
    }//GEN-LAST:event_mItemEliminarActionPerformed

    /**
     * Permite añadir una tarjeta de credito a nuestra tabla y en la base de
     * datos mediante un JDialog.
     *
     * @param evt click izquierdo
     */
    private void mItemAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemAñadirActionPerformed
        JDAñadir añadir = new JDAñadir(this, true);
        añadir.setVisible(true);

        if (añadir.getHaAñadido()) {
            boolean existe = false;
            for (int i = 0; i < this.listaTarjetas.size() && !existe; i++) {
                existe = añadir.getNuevaTarjeta().equals(this.listaTarjetas.get(i));
            }

            if (!existe) {
                tc.create(añadir.getNuevaTarjeta());
                this.listaTarjetas.add(añadir.getNuevaTarjeta());
                modelo.añadirTarjeta(añadir.getNuevaTarjeta());
                JOptionPane.showMessageDialog(rootPane, "La Tarjeta se ha añadido correctamente");

            } else {
                JOptionPane.showMessageDialog(rootPane, "Ya existe una tarjeta con ese número", "ERROR", JOptionPane.ERROR_MESSAGE);

            }
            modelo.fireTableDataChanged();
        }
    }//GEN-LAST:event_mItemAñadirActionPerformed

    /**
     * Nos permite alterar el estado de los atributos de un objeto cancion de la
     * tabla.
     */
    public void modificarTarjeta() {
        JDAñadir modificar = new JDAñadir(this, true, this.tarjetaSeleccionada);
        modificar.setVisible(true);

        if (modificar.getHaModificado()) {
            tc.update(modificar.getTarjeta());
            int indice = this.listaTarjetas.indexOf(this.tarjetaSeleccionada);
            this.listaTarjetas.get(indice).setLimite(modificar.getTarjeta().getLimite());
            this.listaTarjetas.get(indice).setPin(modificar.getTarjeta().getPin());
            modelo.actualizarTarjeta(indice, this.listaTarjetas.get(indice));
            JOptionPane.showMessageDialog(rootPane, "La Tarjeta se ha modificado correctamente");
            modelo.fireTableDataChanged();
        }
    }

    /**
     * Permite modificar el limite y el pin de una tarjeta de credito a traves
     * de un JDialog.
     *
     * @param evt click izquierdo
     */
    private void mItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemModificarActionPerformed
        modificarTarjeta();
    }//GEN-LAST:event_mItemModificarActionPerformed

    /**
     * Permite eliminar mas de una pelicula seleccionada tanto de la base de
     * datos como de la lista de tarjetas del modelo.
     *
     * @param evt click izquierdo
     */
    private void mItemEliminarFilasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemEliminarFilasActionPerformed
        for (int i = this.filasSelec.length - 1; i >= 0; i--) {
            tc.delete(this.listaTarjetas.get(this.filasSelec[i]));
            this.listaTarjetas.remove(this.filasSelec[i]);
            modelo.eliminarTarjeta(this.filasSelec[i]);
        }
        modelo.fireTableDataChanged();
    }//GEN-LAST:event_mItemEliminarFilasActionPerformed

    /**
     * Permite seleccionar distintas tarjetas de credito de la tabla y cuando
     * estas son mayor a dos se nos abre el menu que nos permite eliminar varias
     * de golpe.
     *
     * @param evt click derecho
     */
    private void tableTarjetasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTarjetasMouseReleased

        int[] rows = tableTarjetas.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            //en el array filas seleccionadas, introduzco los indices
            rows[i] = tableTarjetas.convertRowIndexToModel(rows[i]);
        }

        if (rows.length > 1) {
            this.filasSelec = rows;
            pMenuEliminar.setVisible(true);
            pMenuEliminar.show(tableTarjetas, evt.getPoint().x, evt.getPoint().y);
        }
    }//GEN-LAST:event_tableTarjetasMouseReleased

    /**
     * Permite mostrar un determinado numero de movimientos de la tarjeta
     * seleccionada introducido por el usuario mediante un JDialog.
     *
     * @param evt click izquierdo
     */
    private void mItemMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemMovActionPerformed
        mostrarMovimientos();
    }//GEN-LAST:event_mItemMovActionPerformed

    /**
     * Permite mostrar un determinado numero de movimientos de la tarjeta
     * seleccionada introducido por el usuario mediante un JDialog.
     */
    private void mostrarMovimientos() {
        String numMovStr = JOptionPane.showInputDialog(rootPane, "Introduzca la cantidad de movimientos a visualizar");
        if (numMovStr != null) {
            try {
                int numMov = Integer.parseInt(numMovStr);
                if (numMov > 0 && numMov <= 50) {
                    JDMovimientos movimientos = new JDMovimientos(this, true, this.tarjetaSeleccionada, numMov);
                    movimientos.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Número de movimientos incorrecto", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Número de movimientos incorrecto", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        modelo.fireTableDataChanged();
    }

    /**
     * Permite realizar un pago a traves de un JDialog.
     *
     * @param evt click izquierdo
     */
    private void mItemPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemPagarActionPerformed
        JDPagar pagar = new JDPagar(this, true, this.tarjetaSeleccionada);
        pagar.setVisible(true);

        if (pagar.getHaPagado()) {
            mc.create(pagar.getNuevoMovimiento());
        }

        modelo.fireTableDataChanged();
    }//GEN-LAST:event_mItemPagarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mItemAñadir;
    private javax.swing.JMenuItem mItemEliminar;
    private javax.swing.JMenuItem mItemEliminarFilas;
    private javax.swing.JMenuItem mItemModificar;
    private javax.swing.JMenuItem mItemMov;
    private javax.swing.JMenuItem mItemPagar;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JPopupMenu pMenu;
    private javax.swing.JPopupMenu pMenuEliminar;
    private javax.swing.JTable tableTarjetas;
    // End of variables declaration//GEN-END:variables

    /**
     * Nos permite inicializar los valores por defecto que queremos que tenga el
     * JFrame al iniciar el programa.
     */
    private void inicializar() {
        setLocationRelativeTo(null);
        ImageIcon mainIcon = new ImageIcon("iconos/icono.png");
        setIconImage(mainIcon.getImage());
        setTitle("Gestor de Tarjetas");
        tableTarjetas.getTableHeader().setPreferredSize(new Dimension(0, 40));
        tableTarjetas.getTableHeader().setFont(new Font("Seoe UI", Font.BOLD, 14));
    }

}
